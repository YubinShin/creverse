// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @map("created_at")

  submissions Submission[]

  @@map("students")
}

model Submission {
  id            Int      @id @default(autoincrement())
  studentId     Int      @map("student_id")
  student       Student  @relation(fields: [studentId], references: [id])
  componentType String   @map("component_type")
  submitText    String   @map("submit_text")
  status        String   @default("PENDING")
  score         Int?
  feedback      String?
  resultJson    Json?    @map("result_json") // 평가 결과 JSONB
  lastError     String?  @map("last_error")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  media     SubmissionMedia[]
  logs      SubmissionLog[]
  revisions Revision[]

  @@map("submissions")
}

model SubmissionMedia {
  id           Int        @id @default(autoincrement())
  submissionId Int        @map("submission_id")
  submission   Submission @relation(fields: [submissionId], references: [id])

  mediaType String   @map("media_type") // VIDEO / AUDIO
  localPath String?  @map("local_path")
  blobUrl   String?  @map("blob_url")
  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([submissionId, mediaType], name: "submissionId_mediaType")
  @@map("submission_media")
}

model SubmissionLog {
  id           Int        @id @default(autoincrement())
  submissionId Int        @map("submission_id")
  submission   Submission @relation(fields: [submissionId], references: [id])

  phase     String
  uri       String?
  status    String
  traceId   String?  @map("trace_id")
  latencyMs Int?     @map("latency_ms")
  message   String?
  createdAt DateTime @default(now()) @map("created_at")

  @@map("submission_logs")
}

model Revision {
  id           Int        @id @default(autoincrement())
  submissionId Int        @map("submission_id")
  submission   Submission @relation(fields: [submissionId], references: [id])

  prevStatus String   @map("prev_status")
  newStatus  String   @map("new_status")
  reason     String?
  resultJson Json?    @map("result_json")
  createdAt  DateTime @default(now()) @map("created_at")

  @@map("revisions")
}

// 기간별 통계: 집계 테이블 (daily/weekly/monthly)
model StatsDaily {
  id         Int      @id @default(autoincrement())
  date       DateTime
  total      Int
  success    Int
  failed     Int
  avgLatency Int?     @map("avg_latency")
  createdAt  DateTime @default(now()) @map("created_at")

  @@map("stats_daily")
}

model StatsWeekly {
  id         Int      @id @default(autoincrement())
  week       DateTime
  total      Int
  success    Int
  failed     Int
  avgLatency Int?     @map("avg_latency")
  createdAt  DateTime @default(now()) @map("created_at")

  @@map("stats_weekly")
}

model StatsMonthly {
  id         Int      @id @default(autoincrement())
  month      DateTime
  total      Int
  success    Int
  failed     Int
  avgLatency Int?     @map("avg_latency")
  createdAt  DateTime @default(now()) @map("created_at")

  @@map("stats_monthly")
}
